Claro! Aqui est√° um prompt completo e detalhado para voc√™ enviar ao GitHub Copilot ou qualquer agente de IA para gerar o projeto da atividade:

---

üß† **Prompt para o Copilot: Atividade Avaliativa FIAP ‚Äî An√°lise de Qualidade do Solo em Python**

> Crie um projeto em Python chamado `soil-quality-analyzer` voltado √† **An√°lise de Qualidade do Solo**, atendendo os seguintes crit√©rios da atividade avaliativa da FIAP:
>
> ---
> 
> üéØ **Objetivo do Projeto:**  
> Analisar amostras de solo com base nos par√¢metros: `pH`, `Nitrog√™nio`, `F√≥sforo`, `Pot√°ssio` e `Compacta√ß√£o`.  
> A avalia√ß√£o deve indicar se a amostra est√° **Apta** ou **Inapta** para o plantio.
>
> Regras:
> - Faixa ideal de cada par√¢metro:
>   - `pH`: entre 5.5 e 7.0
>   - `Nitrog√™nio (N)`: maior que 20 ppm
>   - `F√≥sforo (P)`: maior que 15 ppm
>   - `Pot√°ssio (K)`: maior que 100 ppm
>   - `Compacta√ß√£o`: menor que 1.4 g/cm¬≥
> - Se **4 ou mais par√¢metros** estiverem dentro da faixa ideal, o solo √© considerado **Apto**.
>
> ---
> 
> ‚úÖ **Requisitos t√©cnicos obrigat√≥rios**:
> 
> 1. **Subalgoritmos (Fun√ß√µes/Procedimentos)**:
>    - Fun√ß√£o para avaliar a qualidade de uma amostra
>    - Fun√ß√£o para ler e validar entradas
>    - Fun√ß√£o para salvar relat√≥rio em arquivo `.txt`
>
> 2. **Estruturas de Dados**:
>    - Lista ou tupla para armazenar amostras
>    - Dicion√°rio para representar uma amostra de solo
>
> 3. **Manipula√ß√£o de Arquivos**:
>    - Leitura de amostras simuladas de um arquivo `.json`
>    - Escrita de relat√≥rio de resultados em `.txt`
>
> 4. **Conex√£o com Banco Oracle**:
>    - Criar um script SQL separado (`oracle_connection.sql`) com estrutura para tabela:
>      ```sql
>      CREATE TABLE SoilSample (
>        id NUMBER PRIMARY KEY,
>        ph NUMBER(3,1),
>        nitrogen NUMBER,
>        phosphorus NUMBER,
>        potassium NUMBER,
>        compaction NUMBER(3,2),
>        status VARCHAR2(10)
>      );
>      ```
>    - Simular a conex√£o ou deixar um coment√°rio com o trecho de c√≥digo para inser√ß√£o.
>
> ---
> 
> üìÅ **Estrutura de pastas e arquivos esperada:**
> ```
> soil-quality-analyzer/
> ‚îú‚îÄ‚îÄ main.py                  # Execu√ß√£o principal
> ‚îú‚îÄ‚îÄ soil_utils.py            # Fun√ß√µes auxiliares de an√°lise e valida√ß√£o
> ‚îú‚îÄ‚îÄ samples.json             # Arquivo com 5 amostras simuladas
> ‚îú‚îÄ‚îÄ report.txt               # Sa√≠da de relat√≥rio
> ‚îú‚îÄ‚îÄ oracle_connection.sql    # Script SQL para banco Oracle
> ‚îî‚îÄ‚îÄ README.md                # Explica√ß√£o do projeto
> ```
>
> ---
>
> üß™ Exemplo de entrada no `samples.json`:
> ```json
> [
>   {
>     "ph": 6.2,
>     "nitrogen": 30,
>     "phosphorus": 18,
>     "potassium": 140,
>     "compaction": 1.2
>   },
>   {
>     "ph": 4.8,
>     "nitrogen": 15,
>     "phosphorus": 10,
>     "potassium": 90,
>     "compaction": 1.6
>   }
> ]
> ```
>
> ---
> 
> üßæ **README.md deve conter**:
> - Objetivo do projeto
> - Requisitos t√©cnicos atendidos
> - Como executar o programa
> - Como testar e validar os dados
> - Explica√ß√£o da regra de avalia√ß√£o do solo

---

Se quiser, posso revisar o c√≥digo que o Copilot gerar e ajustar para garantir que tudo esteja 100%. Deseja isso tamb√©m?